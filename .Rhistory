evaluate(stdev, c(1.4, 3.6, 7.9, 8.8))
evaluate(func, c(1.4, 3.6, 7.9, 8.8))
evaluate(standard deviation, c(1.4, 3.6, 7.9, 8,8))
evaluate(standarddeviation, c(1.4, 3.6, 7.9, 8,8))
evaluate(stdev, c(1.4, 3.6, 7.9, 8,8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){c(8, 4, 0)}, 8)
evaluate(function(x){c(8, 4, 0)} || 8)
evaluate(function(x){c(8, 4, 0)}, [1])
evaluate(function(x){c(8, 4, 0)}, vector[1])
evaluate(function(x){c(8, 4, 0)}, [1}])
evaluate(function(x){c(8, 4, 0)}, [1])
evaluate(function(x){c(8, 4, 0)}, $1)
info()
evaluate(function(x)[1], {c(8, 4, 0)})
evaluate(function(c(8, 4, 0), [1])
evaluate(function(c(8, 4, 0), [1]))
evaluate(funciton(x) x[1], c(8, 4, 0))
evaluate(function(x) x[1], c(8, 4, 0))
evaluate(function(x) x[3], c(8, 4, 0))
evaluate(function(x) x[4], c(8, 4, 0))
evaluate(function(x) x[2], c(8, 4, 0))
?paste
paste("Programming", "is", "fun")
paste("Progamming", "is", "fun!")
paste("Programming", "is", "fun!")
submit
submit
submit()
telegram(2+1)
submit()
submit()
submit()
submit()
submit()
submit
submit()
mad_libs("Champaign", "multiple", "statue")
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_lsit
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flag$orange)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(1:6)
head(flag_colors)
lapply(flag_colors, sum)
sapply(flags_color, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply(vector, index, function)
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants, 1:10)
head(1:10)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
?sample
sample(1:6 ,4, replace = TRUE)
sample(1:6 ,4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0, 1), 100)
flips <- sample(c(0, 1), 100, replace = TRUE)
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(1)
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm()
rnorm(10, 100, 25)
?rpois()
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <-Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
| = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(cars)
Type plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed)
plot(x = Speed, y = cars$speed)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
xlab("Speed")
plot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
xlab("Speed")
plot(mtcars,) +
geom_point() +
xlab("Speed")
plot(mtcars,) +
xlab("Speed")
plot(y = cars$dist, x = cars$speed)
Type plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
mtcars
data(mtcars)
nxt()
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
swirl()
swirl ()
# install.packages("swirl")
library (swirl)
swirl()
getwd()
# install.packages("swirl")
library (swirl)
swirl()
1
swirl()
install_course("Getting and Cleaning Data")
swirl()
install_course("Getting and Cleaning Data")
library(swirl)
install_course("Getting and Cleaning Data")
swirl()
ls()
x <- 9
ls()
install_course("Getting and Cleaning Data")
list.files()
?list.files
args(list.files())
args(list.files)
old.dir <- getwd()
testdir <- dir.create()
install_course("Gettingdi and Cleaning Data")
install_course("Getting and Cleaning Data")
# install.packages("swirl")
library (swirl)
# install.packages("swirl")
library (swirl)
swirl()
swirl()
install_course("Getting and Cleaning Data")
swirl()
library(dplyr)
stop
swirl()
swirl()
swirl()
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, name)
by_package <- group_by(cran, "name")
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, >67 = TRUE)
top_counts <- filter(pack_sum, 67 = TRUE)
top_counts <- filter(pack_sum, TRUE)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc)
top_counts_sorted <- arrange(top_counts,)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, count(unique > 465))
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
install_course("Exploratory Data Analysis")
swirl()
R
R(add)
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot( ppm, color = BLUE)
boxplot(ppm)
boxplot(ppm,col = "blue")
abline(h=12)
hist(ppm,col="green")
rug(ppm)
high
low
high
hist(ppm,col="green",breaks=100)
rub(ppm)
rug(ppm)
hist(ppm,col="green")
abline(v=12, lwd=2)
abline(v=median(ppm),col="magenta",lwd=4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(pm25~region,col="red",data=pollution)
par(mfrom=c(2,1),mar=c(4,4,2,1))
par(mfrow = c(2, 1), mar = c(4,4,2,1))
east <- subset(pollution, "east")
east <- subset(pollution)
east <- subset(pollution,region=="east")
head(east)
hist(pm25,col="green")
hist(east,col="green")
hist(pm25,)
hist(east(pm25),col="green")
hist(east$pm25,col="green")
hist(subset(west,pm25),col="green")
hist(subset(pollution, region=="west")$pm25, col="green")
plot(pollution)
with(pollution, plot(latitude, pm25))
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, pollution$ppm, col=pollution$region)
plot(pollution$latitude,ppm, col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution)
west <- subset(pollution, region=="west")
plot(xlab = west$latitude, ylab = west$pm25, main = "West")
plot(x = west$latitude, y = west$pm25, main = "West")
plot(x = east$latitude, y = east$pm25, main = "East")
?Devices
with(faithful, eruptions, waiting)
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png,)
dev.copy(png, file = "geyserplot.png")
dev.off
dev.off()
swirl()
install_course("Getting and Cleaning Data")
install_course("Getting and Cleaning Data")
swirl()
# install.packages("swirl")
library (swirl)swirl
swirl ()
# install.packages("swirl")
library (swirl)swirl
library (swirl)swirl
# install.packages("swirl")
library (swirl)swirl
# install.packages("swirl")
library (swirl)swirl
swirl()
# install.packages("swirl")
library (swirl)swirl
# install.packages("swirl")
library (swirl)swirl
# install.packages("swirl")
library (swirl)swirl
install.packages("swirl")
install_course("Getting and Cleaning Data")
install_course("Exploratory Data Analysis")
swirl()
install.packages("swirl")
library (swirl)swirl
install.packages("swirl")
library(swirl)
swirl()
swirl()
install_course("Getting and Cleaning Data")
swirl()
library(knitr)
library(dplyr)
library(evaluate)
library(ggplot2)
library(cowplot)
library(readr)
library(float)
library(tidyverse)
library(xtable)
options(xtable.comment = FALSE)
library(psych)
library("psych")
library(car)
View(uaisurvey)
library(float)
library(knitr)
library(dplyr)
library(evaluate)
library(ggplot2)
library(cowplot)
git
library(dplyr)
library(evaluate)
library(ggplot2)
library(readr)
library(float)
library(tidyverse)
library(xtable)
options(xtable.comment = FALSE)
library(psych)
library(corrplot)
library("psych")
library(car)
setwd("~/Documents/GitHub/mixed_datamethods")
fullsurvey %>%
ggplot(aes(x = unlawful)) +
geom_bar() +
facet_wrap(~Unlawful)
fullsurvey <- read.csv("fullsurvey.csv")
fullsurvey %>%
ggplot(aes(x = unlawful)) +
geom_bar() +
facet_wrap(~Unlawful)
fullsurvey %>%
ggplot(aes(x = lazy)) +
geom_bar() +
facet_wrap(~Unlawful)
openended <- openended %>% rename("PoorLowSocioeconomicStatus" = X.24)
fullsurvey %>%
ggplot(aes(x = lazy)) +
geom_bar() +
facet_wrap(~poor.low.socio.economic.status)
fullsurvey %>%
ggplot(aes(x = lazy)) +
geom_bar() +
facet_wrap(~Poor.low.socio.economic.status)
fullsurvey %>%
ggplot(aes(x = Poor.low.socio.economic.status)) +
geom_bar() +
facet_wrap(~lazy)
fullsurvey %>%
ggplot(aes(x = Family.oriented)) +
geom_bar() +
facet_wrap(~hardworking)
fullsurvey %>%
ggplot(aes(x = hardworking)) +
geom_bar() +
facet_wrap(~Family.oriented)
fullsurvey %>%
ggplot(aes(x = hardworking)) +
geom_histogram() +
facet_wrap(~Family.oriented)
fullsurvey %>%
ggplot(aes(x = hardworking)) +
geom_histogram() +
facet_wrap(~Family.oriented)
fullsurvey %>%
ggplot(aes(x = hardworking)) +
geom_histogram() +
binwidth = 2
fullsurvey %>%
ggplot(aes(x = hardworking)) +
geom_histogram() +
stat_bin(binwidth = 2) +
facet_wrap(~Family.oriented)
fullsurvey %>%
ggplot(aes(x = hardworking)) +
geom_histogram() +
stat_bin(binwidth = 10) +
facet_wrap(~Family.oriented)
fullsurvey %>%
ggplot(aes(x = hardworking)) +
geom_histogram() +
stat_bin(binwidth = 0.5) +
facet_wrap(~Family.oriented)
fullsurvey %>%
ggplot(aes(x = hardworking)) +
geom_histogram() +
stat_bin(bins = 20, binwidth = 0.5) +
facet_wrap(~Family.oriented)
fullsurvey %>%
ggplot(aes(x = hardworking)) +
geom_histogram() +
stat_bin(bins = 100, binwidth = 0.5) +
facet_wrap(~Family.oriented)
fullsurvey %>%
ggplot(aes(x = hardworking)) +
geom_histogram() +
stat_bin(binwidth = 0.25) +
facet_wrap(~Family.oriented)
fullsurvey %>%
ggplot(aes(x = hardworking)) +
geom_histogram(y = after_stat(count/sum(count)) +
stat_bin(binwidth = 0.25) +
facet_wrap(~Family.oriented)
fullsurvey %>%
fullsurvey %>%
ggplot(aes(x = hardworking)) +
geom_histogram(y = after_stat(count/sum(count))) +
stat_bin(binwidth = 0.25) +
facet_wrap(~Family.oriented)
fullsurvey %>%
ggplot(aes(x = hardworking)) +
geom_histogram(y = after_stat(count/sum(count))) +
stat_bin(binwidth = 0.25) +
facet_wrap(~Family.oriented)
